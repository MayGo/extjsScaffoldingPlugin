<%  if (property.type == Boolean || property.type == boolean)
        out << renderBooleanEditor(domainClass, property)
    else if (property.type && Number.isAssignableFrom(property.type) || (property.type?.isPrimitive() && property.type != boolean))
        out << renderNumberEditor(domainClass, property)
    else if (property.type == String)
        out << renderStringEditor(domainClass, property)
    else if (property.type == Date || property.type == java.sql.Date || property.type == java.sql.Time || property.type == Calendar)
        out << renderDateEditor(domainClass, property)
    else if (property.type == URL)
        out << renderStringEditor(domainClass, property)
    else if (property.type && property.isEnum())
        out << renderEnumEditor(domainClass, property)
    else if (property.type == TimeZone)
        out << renderSelectTypeEditor("timeZone", domainClass, property)
    else if (property.type == Locale)
        out << renderSelectTypeEditor("locale", domainClass, property)
    else if (property.type == Currency)
        out << renderSelectTypeEditor("currency", domainClass, property)
    else if (property.type==([] as Byte[]).class) //TODO: Bug in groovy means i have to do this :(
        out << renderByteArrayEditor(domainClass, property)
    else if (property.type==([] as byte[]).class) //TODO: Bug in groovy means i have to do this :(
        out << renderByteArrayEditor(domainClass, property)
    else if (property.manyToOne || property.oneToOne)
        out << renderManyToOne(domainClass, property)
    else if ((property.oneToMany && !property.bidirectional) || (property.manyToMany && property.isOwningSide())) {
        def str = renderManyToMany(domainClass, property)
        if (str != null) {
            out << str
        }
    }
    else if (property.oneToMany)
        out << renderOneToMany(domainClass, property)

    private renderEnumEditor(domainClass, property) {
		return """
			editor : {
				xtype : 'combo',
				store : ${(property.type.values()*.name()).collect{"'$it'"}}
			}
			"""
    }

    private String renderStringEditor(domainClass, property) {
		return """
		editor : {
			xtype : 'textfield'
		}
		"""
    }

    private renderByteArrayEditor(domainClass, property) {
        return """
			editor : {
				xtype : 'filefield'
			}
			"""
    }

    private String renderManyToOne(domainClass,property) {
        if (property.association) {
			return  """
			  renderer: function (value, metaData) {
					return 'Object id: ' +value.id;
			  },
			  editor : {
				  xtype : 'combo',
				  valueField: 'id',
				  tpl:'<tpl for="."><div class="x-boundlist-item" >Object id: {id}</div></tpl>',
				  displayTpl: '<tpl for=".">Object id: {id}</tpl>',
				  store: '${property.naturalName}List',
			  }
			"""
        }
    }

    private renderManyToMany(domainClass, property) {
       

    }

    private renderOneToMany(domainClass, property) {
        
    }

    private renderNumberEditor(domainClass, property) {
		String cellStr = " xtype: 'numbercolumn'"
		String cellStrBetween = ""
		String editorStrBegin =",editor : { xtype : 'numberfield'"
		String editorStrBetween = ""
		String editorStrEnd ="}"
		
		
		if (!cp) {
			if (property.type == Byte) {
				editorStrBetween += ", minValue: -128, maxValue: 127"
			}
		} else {
			if (cp.range) {
				return cellStr+", editor : { xtype : 'combo', store : ${cp.range.from..cp.range.to}	}"
			} else if (cp.inList) {
				return cellStr+", editor : { xtype : 'combo', store : ${(domainClass.constraints."${property.name}".inList).collect{"'$it'"}}   }"
			} else {
				if (property.type in [float, double, Float, Double, BigDecimal]) {
					cellStrBetween += ", format:'0.00'"
				}
				if (cp.min != null) editorStrBetween += ", minValue: ${cp.min}"
				if (cp.max != null) editorStrBetween += ", maxValue: ${cp.max}"
			}
			
		}
		return cellStr + cellStrBetween + editorStrBegin + editorStrBetween + editorStrEnd
     }

    private renderBooleanEditor(domainClass, property) {
         return """
		 	xtype: 'booleancolumn',
            trueText: 'Yes',
            falseText: 'No',
			editor : {
				xtype : 'checkbox'
			}
			"""
    }

    private renderDateEditor(domainClass, property) {
         return """
		 	xtype: 'datecolumn',   
		 	format:'Y-m-d',
			editor : {
				xtype : 'datefield'
			}
			"""
    }

    private renderSelectTypeEditor(type, domainClass,property) {
		return """
			editor : {
				xtype : 'combo',
				store : []
			}
			"""

    }

%>
